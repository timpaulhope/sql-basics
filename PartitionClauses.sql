SELECT  S1.TRADING_PERIOD_ID,
        S1.VALUE,
        /*GET VALUE FROM PREVIOUS ROW*/
        SUM (S1.VALUE) OVER (PARTITION BY 1 ORDER BY S1.TRADING_PERIOD_ID ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) AS PRIOR_ROW_VALUE,
        /*GET VALUE FROM NEXT ROW*/
        SUM (S1.VALUE) OVER (PARTITION BY 1 ORDER BY S1.TRADING_PERIOD_ID ROWS BETWEEN 1 FOLLOWING AND 1 FOLLOWING) AS NEXT_ROW_VALUE,
        /*GET RUNNING TOTAL*/
        SUM (S1.VALUE) OVER (PARTITION BY 1 ORDER BY S1.TRADING_PERIOD_ID ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RUNNING_TOTAL,
        /*GET REMAINING TOTAL*/
        SUM (S1.VALUE) OVER (PARTITION BY 1 ORDER BY S1.TRADING_PERIOD_ID ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS TOTAL_REMAINING,
        /*GET RUNNING DAILY TOTAL*/
        SUM (S1.VALUE) OVER (PARTITION BY SUBSTR (S1.TRADING_PERIOD_ID, 0, 8) ORDER BY S1.TRADING_PERIOD_ID ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS DAILY_RUNNING_TOTAL,
        /*GET RUNNING DAILY REMAINING*/
        SUM (S1.VALUE) OVER (PARTITION BY SUBSTR (S1.TRADING_PERIOD_ID, 0, 8) ORDER BY S1.TRADING_PERIOD_ID ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS DAILY_TOTAL_REMAINING,
        /*GET MOVING AVERAGE*/
        ROUND (AVG (VALUE) OVER (PARTITION BY 1 ORDER BY S1.TRADING_PERIOD_ID ROWS BETWEEN 5 PRECEDING AND CURRENT ROW), 2) AS MOVING_AVERAGE
FROM
        (
        /**/
        SELECT  LEVEL  AS TRADING_PERIOD_ID,
                ROUND (DBMS_RANDOM.VALUE (1, 100)) AS VALUE
        FROM    DUAL T1
        WHERE   ROWNUM <= 48
				CONNECT BY LEVEL <= 48
        /**/
        ) S1;
